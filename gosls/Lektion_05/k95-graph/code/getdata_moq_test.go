// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package k95graph

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"sync"
)

// Ensure, that WeightsInterfaceMock does implement WeightsInterface.
// If this is not the case, regenerate this file with moq.
var _ WeightsInterface = &WeightsInterfaceMock{}

// WeightsInterfaceMock is a mock implementation of WeightsInterface.
//
//     func TestSomethingThatUsesWeightsInterface(t *testing.T) {
//
//         // make and configure a mocked WeightsInterface
//         mockedWeightsInterface := &WeightsInterfaceMock{
//             ScanFunc: func(ctx context.Context, params *dynamodb.ScanInput, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error) {
// 	               panic("mock out the Scan method")
//             },
//         }
//
//         // use mockedWeightsInterface in code that requires WeightsInterface
//         // and then make assertions.
//
//     }
type WeightsInterfaceMock struct {
	// ScanFunc mocks the Scan method.
	ScanFunc func(ctx context.Context, params *dynamodb.ScanInput, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *dynamodb.ScanInput
			// OptFns is the optFns argument value.
			OptFns []func(*dynamodb.Options)
		}
	}
	lockScan sync.RWMutex
}

// Scan calls ScanFunc.
func (mock *WeightsInterfaceMock) Scan(ctx context.Context, params *dynamodb.ScanInput, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error) {
	if mock.ScanFunc == nil {
		panic("WeightsInterfaceMock.ScanFunc: method is nil but WeightsInterface.Scan was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *dynamodb.ScanInput
		OptFns []func(*dynamodb.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	mock.lockScan.Unlock()
	return mock.ScanFunc(ctx, params, optFns...)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//     len(mockedWeightsInterface.ScanCalls())
func (mock *WeightsInterfaceMock) ScanCalls() []struct {
	Ctx    context.Context
	Params *dynamodb.ScanInput
	OptFns []func(*dynamodb.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *dynamodb.ScanInput
		OptFns []func(*dynamodb.Options)
	}
	mock.lockScan.RLock()
	calls = mock.calls.Scan
	mock.lockScan.RUnlock()
	return calls
}
